use std::fs;
use std::path::PathBuf;
use std::process::exit;

use clap::Args;
use crate::utils::validate;

const FIVE: f64 = 5.0;
const GOLDEN_RATIO:f64 = 1.618;

#[derive(Args, Debug)]
pub struct EvenFibonacchi {
    // The filename containing test cases.
    #[arg(short, long)]
    pub filename: Option<PathBuf>,

    // A number to calculate the multiples for.
    #[arg(short, long)]
    pub number: Option<u64>,
}

fn binet(number: u64) -> u64 {
    let mut product = number as f64 * FIVE.sqrt();
    product = product.ln();
    product = product/ GOLDEN_RATIO.ln();
    return product.abs() as u64 + 5;
    
} 

fn fibonacchi(number: u64) -> Vec<u64> {
    let mut values: Vec<u64> = vec![];
    values.shrink_to(number as usize);
    values.push(0);
    values.push(1);
    for i in 2..number{
        let n = values[i as usize -1]  + values[i as usize -2];
        values.push(n);
    }
    return values;
}

fn solvefile(filename: PathBuf){
    let filename = filename.to_str().expect("Unable to read the filename.");
    match fs::exists(filename) {
        Ok(true) => (),
        _ => validate::process_exit(filename),
    }
    match validate::check_file(filename) {
        true => (),
        false => exit(1),
    }
    println!("Problem :");
    println!("-------------------------------- :");
    println!("  Each new term in the Fibonacci sequence is generated by adding the previous two terms, you get a number N. Your task is to find the sum of the even-valued terms.");
    println!("");
    let contents: String = fs::read_to_string(filename)
        .expect("Should have been able to read the file");
    for line in contents.lines().skip(1) {
        let number: u64  = line.parse().expect("Not a number.");
        let limit = binet(number);
        let array = fibonacchi(limit);
        let values: Vec<u64> = array.iter().filter(|x| *x%2 ==0 && **x<number).copied().collect();
        let sum: u64= values.iter().sum();
        println!("Number : {number} and Sum : {}", sum);
    }
}

 

fn solvenum(n: u64) {
    println!("Problem :");
    println!("-------------------------------- :");
    println!("  Each new term in the Fibonacci sequence is generated by adding the previous two terms, you get a number N. Your task is to find the sum of the even-valued terms.");
    println!("");
    let limit = binet(n);
    let array = fibonacchi(limit);
    let values: Vec<u64> = array.iter().filter(|x| *x%2 ==0 && **x<n).copied().collect();
    let sum: u64= values.iter().sum();
    print!("{}", sum);
}

pub fn solve(arguments: EvenFibonacchi){
    match arguments.filename {
        Some(filename) => solvefile(filename),
        None => (),
    }
    
    match arguments.number {
        Some(num) => solvenum(num),
        None => (),
    }
}   